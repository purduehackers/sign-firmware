name: Continuous Integration

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        action:
          - command: build
            args: --release
          - command: fmt
            args: --all -- --check --color always
          - command: clippy
            args: --all-features --workspace -- -D warnings
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: esp-rs/xtensa-toolchain@v1.5
        with:
          default: true
          buildtargets: esp32s3
          ldproxy: true

      - name: Enable caching
        uses: Swatinem/rust-cache@v2

      - name: Create .env file with Wi-Fi credentials
        run: |
          echo "WIFI_SSID=${{ secrets.WIFI_SSID }}" >> .env
          echo "WIFI_USERNAME=${{ secrets.WIFI_USERNAME }}" >> .env
          echo "WIFI_PASSWORD=${{ secrets.WIFI_PASSWORD }}" >> .env

      - name: Run command
        run: cargo ${{ matrix.action.command }} ${{ matrix.action.args }}

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: rust-checks
    if: github.ref == 'refs/heads/main' # Ensure it runs only on the main branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Cargo version
        id: cargo-version
        run: echo "VERSION=$(grep '^version =' Cargo.toml | sed -E 's/version = \"([^\"]+)\"/\1/')" >> $GITHUB_ENV

      - name: Get latest release version
        id: get-latest-release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const latestRelease = await github.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              core.setOutput("version", latestRelease.data.tag_name.replace(/^v/, ''));
            } catch (error) {
              // No releases found, setting a very low default version
              core.setOutput("version", "0.0.0");
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compare versions
        id: version-check
        run: |
          if [ "$(printf '%s\n' "${{ steps.get-latest-release.outputs.version }}" "$VERSION" | sort -V | head -n1)" != "${{ steps.get-latest-release.outputs.version }}" ]; then
            echo "new_version=true" >> $GITHUB_ENV
          else
            echo "new_version=false" >> $GITHUB_ENV
          fi

      - name: Build for release
        if: env.new_version == 'true'
        run: cargo build --release

      - name: Upload release artifact
        if: env.new_version == 'true'
        run: |
          mkdir -p release
          cp target/release/sign-firmware release/
        shell: bash

      - name: Create Release
        if: env.new_version == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          body: "Release version ${{ env.VERSION }}"
          files: release/sign-firmware
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
